/* el bucle principal, un simple while que se ejecuta mientras el juego este abierto
 * detro contendra 2 metodos(por ahora), uno que se encarga de actualizar el estado del juego y el otro
 * se encargara de redibujar en la pantalla.
 */
package Juego;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Dimension;

import javax.swing.JFrame;

public class Juego extends Canvas implements Runnable{

	private static final long serialVersionUID = 1L;
	
	private static final int ANCHO = 700;
	private static final int ALTO = 600;
	private static final String NOMBRE = "Juego";
	private static JFrame Ventana;
	private static Thread thread;
	
	//-----------------------------------------------------------------------------------------------
	/*nesesitamos un booleano que controle si el juego se esta ejecutando o no
	Y MUCHO OJO: esta es una variable accedida por mas de 1 thread, osea, un thread podria 
	estar escribiendola mientras otro la lee, causando un cierre inesperado!!
	la solucion a esto es agregar el modificador VOLATILE
	VOLATILE se encargara de que si un thread esta operando con esta variable
	otro thread no podra tocarlo!! */
	
	private static volatile boolean Corriendo = false;
	//-----------------------------------------------------------------------------------------------
	
	private Juego(){

		setPreferredSize(new Dimension(ANCHO,ALTO));
		
		Ventana = new JFrame(NOMBRE);
		
		Ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Ventana.setResizable(false);
		Ventana.setVisible(true);
		Ventana.setLayout(new BorderLayout());
		Ventana.add(this, BorderLayout.CENTER);
		Ventana.pack();
		Ventana.setLocationRelativeTo(null);
		
	}
//------------------------------------------------------------------------------------------------
	//aca tambien se tomaron medidas de seguridad, se añadio SYNCHRONIZED a los metodos que trabajano
	//con el booleano "corriendo", para que no puedan modificar simultaneamente a la variable corriendo....
	private synchronized void iniciar(){
		//cuando iniciamos corriendo = true
		Corriendo = true;
		thread = new Thread(this, "Graficos");
		thread.start();
	}

	private synchronized void detener(){
		Corriendo = false;
		//ya casi esta, ahora solo falta parar el thread, como?:
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		/*el metodo join, de thread, lo detiene. se encierra en un try catch solo por seguridad
		tambien existe el metodo thread.stop() pero este es muy poco recomendable ya que podria 
		traer problemas devido a que cierra el programa abruptamente, sin embarjo, join() lo
		cierra una vez termine de ejecutarse el thread.*/
	}
//------------------------------------------------------------------------------------------------
	public void run() {
		//este bucle principal se ejecutara hasta que corriendo sea igual a false
		while(Corriendo){
			
		}
	}
	
	public static void main(String[] args){
		Juego juego = new Juego();
		juego.iniciar();
	}
	
}

